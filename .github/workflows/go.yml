name: Build & Release (Go/Wails)

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      CGO_ENABLED: "1"
      MACOSX_DEPLOYMENT_TARGET: "11.0"
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            name: macos-arm64
            platform: darwin/arm64
            archive: clip-save-${{ github.ref_name }}.dmg
          - os: windows-latest
            name: windows-ia32
            platform: windows/386
            archive: clip-save-${{ github.ref_name }}-win-ia32.zip

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Setup MSYS2 + mingw-w64 toolchain (Windows 32-bit specific)
      - name: Setup MSYS2 (Windows 32-bit)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW32  # 明确使用32位环境
          update: true
          install: >-
            base-devel
            mingw-w64-i686-toolchain  # 32位工具链
            mingw-w64-i686-pkg-config  # 32位pkg-config
          path-type: inherit

      # 仅保留一次Windows工具链路径配置（32位专用）
      - name: Setup Windows build environment
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          # 32位平台固定使用mingw32工具链
          $toolBin = 'C:\\msys64\\mingw32\\bin'
          Write-Host "Using 32-bit toolchain: $toolBin"
          
          if (!(Test-Path $toolBin)) {
            throw "32-bit toolchain directory not found: $toolBin"
          }
          
          # 验证编译器存在
          $gcc = Join-Path $toolBin 'gcc.exe'
          $gxx = Join-Path $toolBin 'g++.exe'
          if (!(Test-Path $gcc)) { throw "gcc.exe not found at $gcc" }
          if (!(Test-Path $gxx)) { throw "g++.exe not found at $gxx" }
          
          # 添加到PATH并设置环境变量
          echo $toolBin | Out-File -FilePath $env:GITHUB_PATH -Append
          echo "CC=$gcc" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "CXX=$gxx" | Out-File -FilePath $env:GITHUB_ENV -Append
          
          # 验证编译器版本
          Write-Host "GCC version:"
          & $gcc --version

      - name: Setup Go (from go.mod)
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: |
            go.sum
            frontend/package-lock.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      # --- macOS specific prerequisites ---
      - name: Setup macOS build environment
        if: runner.os == 'macOS'
        run: |
          echo "Current xcode-select path:"
          xcode-select -p || echo "No xcode-select path set"
          
          sudo xcode-select -switch /Library/Developer/CommandLineTools
          
          echo "Looking for macOS SDK:"
          SDK_PATH=$(xcrun --show-sdk-path 2>/dev/null || echo "")
          if [ -z "$SDK_PATH" ]; then
            echo "No SDK found via xcrun, trying manual search..."
            SDK_PATH=$(find /Library/Developer/CommandLineTools/SDKs -name "MacOSX.sdk" -type d 2>/dev/null | head -1)
          fi
          
          echo "SDK Path: $SDK_PATH"
          
          if [ -d "$SDK_PATH" ] && [ -f "$SDK_PATH/usr/include/stdlib.h" ]; then
            echo "SDK found and contains stdlib.h"
            echo "SDKROOT=$SDK_PATH" >> $GITHUB_ENV
          else
            echo "SDK not found or incomplete, installing Command Line Tools..."
            sudo xcode-select --install
            sleep 30
            sudo xcode-select -switch /Library/Developer/CommandLineTools
            SDK_PATH=$(xcrun --show-sdk-path)
            echo "SDKROOT=$SDK_PATH" >> $GITHUB_ENV
          fi
          
          echo "CC=/Library/Developer/CommandLineTools/usr/bin/clang" >> $GITHUB_ENV
          echo "CXX=/Library/Developer/CommandLineTools/usr/bin/clang++" >> $GITHUB_ENV
          echo "PATH=/Library/Developer/CommandLineTools/usr/bin:$PATH" >> $GITHUB_ENV
          echo "CGO_CFLAGS=-isysroot $SDK_PATH" >> $GITHUB_ENV
          echo "CGO_LDFLAGS=-isysroot $SDK_PATH" >> $GITHUB_ENV
          
          echo "Final environment:"
          echo "CC: $CC"
          echo "SDKROOT: $SDK_PATH"
          /Library/Developer/CommandLineTools/usr/bin/clang --version
          xcode-select -p

      # --- Build steps ---
      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Go deps
        run: go mod tidy

      - name: Frontend deps
        run: |
          cd frontend
          npm ci

      - name: Build (wails) - macOS
        if: runner.os == 'macOS'
        env:
          GOBIN: ${{ github.workspace }}/bin
          PATH: ${{ github.workspace }}/bin:${{ env.PATH }}
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
          SDKROOT: ${{ env.SDKROOT }}
          CGO_CFLAGS: ${{ env.CGO_CFLAGS }}
          CGO_LDFLAGS: ${{ env.CGO_LDFLAGS }}
        run: |
          echo "Build environment:"
          echo "CC: $CC"
          echo "SDKROOT: $SDKROOT"
          wails build -platform ${{ matrix.platform }}

      - name: Build (wails) - Windows
        if: runner.os == 'Windows'
        env:
          GOBIN: ${{ github.workspace }}/bin
          PATH: ${{ github.workspace }}/bin:${{ env.PATH }}
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
        shell: pwsh
        run: |
          echo "Build environment (Windows):"
          echo "CC: $env:CC"
          echo "PATH: $env:PATH"
          & $env:CC --version  # 再次验证编译器可访问
          wails build -platform ${{ matrix.platform }}

      # --- Create DMG (macOS) ---
      - name: Install create-dmg
        if: runner.os == 'macOS'
        run: brew install create-dmg

      - name: Create installation README (macOS)
        if: runner.os == 'macOS'
        run: |
          cat > 安装说明.md << 'EOF'
          # 剪存 - 安装说明
          
          ## 安装步骤
          1. 将 "剪存.app" 拖拽到 "Applications" 文件夹
          2. 双击 "剪存.app" 启动应用
          3. 首次启动可能需要在系统偏好设置中允许运行
          
          ## 系统要求
          - macOS 11.0 或更高版本
          - Apple Silicon (M1/M2/M3) 处理器
          
          ## 权限设置
          如果应用无法启动，请到：
          系统偏好设置 > 安全性与隐私 > 通用
          点击"仍要打开"

          ## 提示 应用已损坏，无法打开。你应该将它移到废纸篓。 运行以下命令
          sudo xattr -rd com.apple.quarantine /Applications/剪存.app
          
          ## 卸载
          将 Applications 文件夹中的"剪存.app"移到废纸篓即可
          EOF

      - name: Create DMG
        if: runner.os == 'macOS'
        run: |
          ln -sf /Applications build/bin/Applications
          cp 安装说明.md build/bin/
          create-dmg \
            --volname "剪存" \
            --volicon "build/appicon.png" \
            --window-pos 200 120 \
            --window-size 600 550 \
            --icon-size 100 \
            --icon "剪存.app" 175 175 \
            --hide-extension "剪存.app" \
            --icon "Applications" 425 175 \
            --hide-extension "Applications" \
            --icon "安装说明.md" 175 350 \
            --hide-extension "安装说明.md" \
            --app-drop-link 425 350 \
            "clip-save-${{ github.ref_name }}.dmg" \
            "build/bin/"

      - name: Package Windows zip
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $zipPath = "${{ github.workspace }}\\${{ matrix.archive }}"
          Compress-Archive -Path "build/bin/*" -DestinationPath $zipPath -Force

      - name: Upload build artifact (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: clip-save-${{ github.ref_name }}.dmg
          if-no-files-found: error

      - name: Upload build artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.archive }}
          if-no-files-found: error

  release:
    name: Create/Update Release
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List downloaded files
        run: ls -R dist

      - name: Create GitHub Release & upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}