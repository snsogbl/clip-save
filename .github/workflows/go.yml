name: Build & Release (Go/Wails)

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      # Enable cgo (gohook/Wails 原生部分需要)
      CGO_ENABLED: "1"
      # 对 macOS 指定最低部署版本，避免 SDK 选择问题
      MACOSX_DEPLOYMENT_TARGET: "11.0"
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: linux-amd64
            platform: linux/amd64
            archive: clip-save-linux-amd64-${{ github.ref_name }}.zip
          - os: windows-latest
            name: windows-amd64
            platform: windows/amd64
            archive: clip-save-windows-amd64-${{ github.ref_name }}.zip
          - os: macos-latest
            name: macos-arm64
            platform: darwin/arm64
            archive: clip-save-macos-arm64-${{ github.ref_name }}.zip

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go (from go.mod)
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: |
            go.sum
            frontend/package-lock.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      # --- OS specific prerequisites ---
      - name: Install Linux deps (GTK/WebKit/CGo)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install Windows deps (mingw)
        if: runner.os == 'Windows'
        run: |
          choco install -y mingw

      - name: Ensure clang on macOS (via Homebrew LLVM)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install llvm
          echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          # 打印版本用于诊断
          $(brew --prefix llvm)/bin/clang --version
          xcode-select -p

      # --- Build steps ---
      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Go deps
        run: go mod tidy

      - name: Frontend deps
        run: |
          cd frontend
          npm ci

      - name: Build (wails)
        env:
          # 双保险启用 CGO
          CGO_ENABLED: "1"
          # macOS 上如果前面设了 CC/CXX/SDKROOT，这里会自动继承
          GOBIN: ${{ github.workspace }}/bin
          PATH: ${{ github.workspace }}/bin:${{ env.PATH }}
        run: |
          wails build -platform ${{ matrix.platform }}

      # --- Archive artifacts per OS ---
      - name: Pack artifact (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd build
          zip -r "../${{ matrix.archive }}" ./bin
          cd ..
      - name: Pack artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Compress-Archive -Path build\bin\* -DestinationPath "${{ matrix.archive }}"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.archive }}
          if-no-files-found: error

  release:
    name: Create/Update Release
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List downloaded files
        run: ls -R dist

      - name: Create GitHub Release & upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
